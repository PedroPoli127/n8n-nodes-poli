import type {
	IWebhookFunctions,
	IDataObject,
	INodeType,
	INodeTypeDescription,
	IWebhookResponseData,
	IExecuteFunctions,
	INodeExecutionData,
} from 'n8n-workflow';

import { apiRequest } from './transport';

interface IWebhookData {
	webhookUrl: string;
	applicationId: string;
}

export class PoliTrigger implements INodeType {
	description: INodeTypeDescription = {
		displayName: 'Poli Trigger',
		name: 'poliTrigger',
		icon: 'file:poli.svg',
		group: ['trigger'],
		version: 1,
		description: 'Trigger para receber webhooks da API da Poli',
		defaults: {
			name: 'Poli Trigger',
		},
		inputs: [],
		outputs: ['main'],
		credentials: [
			{
				name: 'poliApi',
				required: true,
			},
		],
		webhooks: [
			{
				name: 'default',
				httpMethod: 'POST',
				responseMode: 'onReceived',
				path: 'poli',
			},
		],
		properties: [
			{
				displayName: 'App Name',
				name: 'appName',
				type: 'string',
				default: '',
				required: true,
				description: 'Nome do app que será criado na Poli',
			},
			{
				displayName: 'Eventos',
				name: 'events',
				type: 'multiOptions',
				options: [
					{
						name: 'Message Received',
						value: 'message.received',
						description: 'Quando uma nova mensagem é recebida'
					},
					{
						name: 'Message Status Updated',
						value: 'message.status',
						description: 'Quando o status de uma mensagem é atualizado'
					},
					{
						name: 'Contact Updated',
						value: 'contact.updated',
						description: 'Quando um contato é atualizado'
					},
					{
						name: 'Contact Created',
						value: 'contact.created',
						description: 'Quando um novo contato é criado'
					}
				],
				default: ['message.received'],
				required: true,
				description: 'Eventos que serão monitorados',
			},
		],
	};

	async webhook(this: IWebhookFunctions): Promise<IWebhookResponseData> {
		const bodyData = this.getBodyData() as IDataObject;
		
		return {
			workflowData: [
				this.helpers.returnJsonArray([bodyData])
			],
		};
	}

	async execute(this: IExecuteFunctions): Promise<INodeExecutionData[][] | null> {
		const credentials = await this.getCredentials('poliApi');
		const webhookData = this.getWorkflowStaticData('node') as IWebhookData;

		if (!credentials) {
			throw new Error('Credenciais não fornecidas');
		}

		const accountUuid = credentials.accountUuid as string;
		const events = this.getNodeParameter('events', 0) as string[];
		const appName = this.getNodeParameter('appName', 0) as string;
		const webhookUrl = this.getWebhookUrl('default');

		try {
			// 1. Criar App
			const appData = {
				visibility: 'PRIVATE',
				attributes: {
					name: appName,
					description: 'App criado automaticamente pelo n8n para receber webhooks',
					responsible: 'n8n',
					email: 'n8n@poli.digital',
					phone: '0000000000'
				}
			};

			const app = await apiRequest.call(
				this,
				'POST',
				`/accounts/${accountUuid}/applications?include=attributes`,
				appData
			);

			if (!app.data || !app.data.id) {
				throw new Error('Erro ao criar app na Poli');
			}

			const applicationId = app.data.id;

			// 2. Criar Webhook
			const webhookReqData = {
				url: webhookUrl,
				subscriptions: events
			};

			await apiRequest.call(
				this,
				'POST',
				`/applications/${applicationId}/webhooks?include=url,subscriptions`,
				webhookReqData
			);

			// Salvar dados para cleanup
			webhookData.applicationId = applicationId;
			webhookData.webhookUrl = webhookUrl;

			return null;

		} catch (error) {
			throw new Error(`Erro ao configurar webhook: ${error}`);
		}
	}
}
