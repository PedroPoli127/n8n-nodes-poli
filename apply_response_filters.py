#!/usr/bin/env python3
"""
Script para aplicar filtros de resposta automaticamente em todas as opera√ß√µes
que fazem requisi√ß√µes GET (listagem) do n8n-nodes-poli
"""

import os
import re
from pathlib import Path

def find_operation_files():
    """Encontra todos os arquivos de opera√ß√£o"""
    operations_dir = Path("/workspaces/n8n-nodes-poli/nodes/Poli")
    operation_files = []
    
    for file in operations_dir.glob("*.operation.ts"):
        operation_files.append(file)
    
    return operation_files

def is_list_operation(file_path):
    """Verifica se √© uma opera√ß√£o de listagem baseada no nome do arquivo"""
    filename = file_path.stem.lower()
    list_keywords = ['list', 'get']
    return any(keyword in filename for keyword in list_keywords)

def has_api_request(content):
    """Verifica se o arquivo cont√©m chamadas para apiRequest"""
    return 'apiRequest.call(this, \'GET\'' in content

def already_has_filter(content):
    """Verifica se o arquivo j√° tem o filtro aplicado"""
    return 'processApiResponseForN8n' in content

def add_import_if_needed(content):
    """Adiciona o import do filtro se necess√°rio"""
    if 'processApiResponseForN8n' in content:
        return content, False
    
    # Encontra a linha de import do parameterUtils
    pattern = r"import \{ getParameterSafe \} from '\./utils/parameterUtils';"
    replacement = "import { getParameterSafe } from './utils/parameterUtils';\nimport { processApiResponseForN8n } from './utils/responseFilter';"
    
    if re.search(pattern, content):
        content = re.sub(pattern, replacement, content)
        return content, True
    
    return content, False

def add_filter_to_response(content):
    """Adiciona o filtro √† resposta da API"""
    if 'processApiResponseForN8n' in content:
        return content, False
    
    # Padr√£o para encontrar chamadas de API GET
    pattern = r'(const responseData = await apiRequest\.call\(this, \'GET\', endpoint\);)\s*\n\s*(returnData\.push\(\{ json: responseData \}\);)'
    
    replacement = r'''\1
			
			// Filtra a resposta para remover campos desnecess√°rios
			const filteredData = processApiResponseForN8n(responseData, true);
			returnData.push({ json: filteredData });'''
    
    if re.search(pattern, content):
        content = re.sub(pattern, replacement, content)
        return content, True
    
    return content, False

def process_file(file_path):
    """Processa um arquivo individual"""
    print(f"Processando: {file_path.name}")
    
    # L√™ o conte√∫do do arquivo
    with open(file_path, 'r', encoding='utf-8') as f:
        content = f.read()
    
    # Verifica se √© uma opera√ß√£o de listagem e se tem apiRequest
    if not is_list_operation(file_path):
        print(f"  ‚ùå N√£o √© opera√ß√£o de listagem: {file_path.name}")
        return False
    
    if not has_api_request(content):
        print(f"  ‚ùå N√£o tem apiRequest GET: {file_path.name}")
        return False
    
    if already_has_filter(content):
        print(f"  ‚úÖ J√° tem filtro aplicado: {file_path.name}")
        return False
    
    # Adiciona o import
    content, import_added = add_import_if_needed(content)
    
    # Adiciona o filtro √† resposta
    content, filter_added = add_filter_to_response(content)
    
    if import_added or filter_added:
        # Salva o arquivo modificado
        with open(file_path, 'w', encoding='utf-8') as f:
            f.write(content)
        print(f"  ‚úÖ Filtro aplicado com sucesso: {file_path.name}")
        return True
    else:
        print(f"  ‚ö†Ô∏è  N√£o foi poss√≠vel aplicar o filtro: {file_path.name}")
        return False

def main():
    """Fun√ß√£o principal"""
    print("üîç Procurando arquivos de opera√ß√£o...")
    operation_files = find_operation_files()
    
    print(f"üìÅ Encontrados {len(operation_files)} arquivos de opera√ß√£o")
    
    processed_count = 0
    
    for file_path in operation_files:
        if process_file(file_path):
            processed_count += 1
    
    print(f"\n‚úÖ Processamento conclu√≠do!")
    print(f"üìä {processed_count} arquivos foram modificados")
    print(f"üìã {len(operation_files) - processed_count} arquivos n√£o precisaram de modifica√ß√£o")

if __name__ == "__main__":
    main()
